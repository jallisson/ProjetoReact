// server/config/env-loader.js
// Vers√£o otimizada para Railway que prioriza vari√°veis de ambiente do sistema

const fs = require('fs');
const path = require('path');

class RailwayEnvLoader {
  constructor() {
    this.loaded = false;
    this.config = {};
  }

  forceLoad() {
    if (this.loaded) {
      return this.config;
    }

    console.log('üîÑ Carregando configura√ß√µes de ambiente...');
    console.log('üåç NODE_ENV:', process.env.NODE_ENV || 'development');
    console.log('üöÇ RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT ? 'SIM' : 'N√ÉO');

    // SEMPRE usar vari√°veis de ambiente do sistema primeiro
    this.config = this.loadFromSystemEnv();

    // Se alguma vari√°vel cr√≠tica estiver faltando e n√£o for Railway, tentar .env
    const missingCritical = this.checkMissingCritical();
    if (missingCritical.length > 0 && !process.env.RAILWAY_ENVIRONMENT) {
      console.log('‚ö†Ô∏è Vari√°veis cr√≠ticas ausentes, tentando arquivo .env...');
      const envPath = this.findEnvFile();
      if (envPath) {
        const envConfig = this.parseEnvFile(envPath);
        // Mesclar apenas as vari√°veis que est√£o faltando
        missingCritical.forEach(key => {
          if (envConfig[key]) {
            this.config[key] = envConfig[key];
          }
        });
      }
    }

    // Definir as vari√°veis no process.env
    this.setProcessEnv(this.config);

    // Validar configura√ß√£o final
    this.validateConfig();

    this.loaded = true;
    return this.config;
  }

  // Carregar SEMPRE do sistema de vari√°veis de ambiente
  loadFromSystemEnv() {
    console.log('üìä Carregando vari√°veis de ambiente do sistema...');
    
    const config = {
      DB_HOST: process.env.DB_HOST,
      DB_USER: process.env.DB_USER,
      DB_PASSWORD: process.env.DB_PASSWORD,
      DB_NAME: process.env.DB_NAME,
      DB_PORT: process.env.DB_PORT,
      PORT: process.env.PORT
    };

    console.log('üìã Vari√°veis encontradas no sistema:');
    Object.keys(config).forEach(key => {
      const value = config[key];
      const displayValue = key.includes('PASSWORD') ? 
        (value ? '*'.repeat(value.length) : 'AUSENTE') : 
        (value || 'AUSENTE');
      console.log(`   ${key}: ${displayValue} ${value ? '‚úÖ' : '‚ùå'}`);
    });

    return config;
  }

  // Verificar vari√°veis cr√≠ticas ausentes
  checkMissingCritical() {
    const critical = ['DB_HOST', 'DB_USER', 'DB_NAME'];
    return critical.filter(key => !process.env[key]);
  }

  // Encontra o arquivo .env correto (apenas para desenvolvimento)
  findEnvFile() {
    const possiblePaths = [
      path.join(__dirname, '..', '.env'),
      path.join(__dirname, '..', '..', '.env'),
      path.join(process.cwd(), '.env'),
      path.join(process.cwd(), 'server', '.env')
    ];

    console.log('üîç Procurando arquivo .env em:');
    
    for (const envPath of possiblePaths) {
      console.log(`   Tentando: ${envPath}`);
      
      if (fs.existsSync(envPath)) {
        console.log(`‚úÖ Arquivo .env encontrado: ${envPath}`);
        return envPath;
      }
    }

    console.log('‚ùå Arquivo .env n√£o encontrado!');
    return null;
  }

  // Parse manual do arquivo .env
  parseEnvFile(envPath) {
    try {
      const content = fs.readFileSync(envPath, 'utf8');
      const config = {};

      console.log('üìÑ Lendo arquivo .env...');
      
      content.split('\n').forEach((line, index) => {
        line = line.trim();
        
        if (!line || line.startsWith('#')) {
          return;
        }

        const equalIndex = line.indexOf('=');
        if (equalIndex === -1) {
          return;
        }

        const key = line.substring(0, equalIndex).trim();
        const value = line.substring(equalIndex + 1).trim();
        const cleanValue = value.replace(/^["']|["']$/g, '');
        
        config[key] = cleanValue;
        console.log(`   ${index + 1}: ${key}=${key.includes('PASSWORD') ? '*'.repeat(cleanValue.length) : cleanValue} ‚úÖ`);
      });

      return config;
    } catch (error) {
      console.error(`‚ùå Erro ao ler arquivo .env: ${error.message}`);
      return {};
    }
  }

  // Define as vari√°veis no process.env (SEM sobrescrever se j√° existir)
  setProcessEnv(config) {
    Object.keys(config).forEach(key => {
      if (config[key] && !process.env[key]) {
        process.env[key] = config[key];
        console.log(`üîß ${key} definido no process.env`);
      } else if (process.env[key]) {
        console.log(`‚ö†Ô∏è ${key} j√° existe no process.env, mantendo valor do sistema`);
      }
    });
  }

  // Aplicar valores padr√£o apenas se absolutamente necess√°rio
  applyDefaults() {
    const defaults = {
      DB_HOST: 'localhost',
      DB_USER: 'root',
      DB_PASSWORD: '',
      DB_NAME: 'gerenciamento_produtos',
      DB_PORT: '3306',
      PORT: '5000'
    };

    console.log('‚ö†Ô∏è Aplicando valores padr√£o para vari√°veis ausentes...');
    
    Object.keys(defaults).forEach(key => {
      if (!process.env[key]) {
        process.env[key] = defaults[key];
        console.log(`üîß ${key} definido com valor padr√£o: ${defaults[key]}`);
      }
    });
  }

  // Valida se a configura√ß√£o est√° completa
  validateConfig() {
    console.log('üîç Validando configura√ß√£o final...');
    
    const required = ['DB_HOST', 'DB_USER', 'DB_NAME', 'DB_PORT'];
    const missing = required.filter(key => !process.env[key]);

    if (missing.length > 0) {
      console.error(`‚ùå Vari√°veis obrigat√≥rias ausentes: ${missing.join(', ')}`);
      
      // No Railway, aplicar defaults se necess√°rio
      if (process.env.RAILWAY_ENVIRONMENT) {
        console.log('üöÇ Railway detectado, aplicando configura√ß√£o de emerg√™ncia...');
        this.applyDefaults();
      } else {
        throw new Error(`Configura√ß√£o incompleta: ${missing.join(', ')}`);
      }
    }

    console.log('‚úÖ Configura√ß√£o validada com sucesso');
    console.log('üìä Configura√ß√£o final:');
    console.log(`   Host: ${process.env.DB_HOST}:${process.env.DB_PORT}`);
    console.log(`   User: ${process.env.DB_USER}`);
    console.log(`   Database: ${process.env.DB_NAME}`);
    console.log(`   Password: ${process.env.DB_PASSWORD ? '*'.repeat(process.env.DB_PASSWORD.length) : 'VAZIO'}`);
    console.log(`   Port: ${process.env.PORT}`);
  }

  // M√©todo para testar conectividade b√°sica
  async testConnectivity() {
    const net = require('net');
    const host = process.env.DB_HOST || 'localhost';
    const port = parseInt(process.env.DB_PORT) || 3306;

    return new Promise((resolve) => {
      const socket = new net.Socket();
      const timeout = 10000; // 10 segundos

      socket.setTimeout(timeout);
      
      socket.on('connect', () => {
        console.log(`‚úÖ Conectividade TCP para ${host}:${port} OK`);
        socket.destroy();
        resolve(true);
      });

      socket.on('timeout', () => {
        console.log(`‚è∞ Timeout ao conectar em ${host}:${port}`);
        socket.destroy();
        resolve(false);
      });

      socket.on('error', (error) => {
        console.log(`‚ùå Erro de conectividade para ${host}:${port}: ${error.message}`);
        resolve(false);
      });

      console.log(`üîå Testando conectividade TCP para ${host}:${port}...`);
      socket.connect(port, host);
    });
  }

  reload() {
    this.loaded = false;
    this.config = {};
    return this.forceLoad();
  }

  getConfig() {
    if (!this.loaded) {
      return this.forceLoad();
    }
    return this.config;
  }
}

// Inst√¢ncia singleton
const envLoader = new RailwayEnvLoader();

// Carregar imediatamente
envLoader.forceLoad();

module.exports = envLoader;